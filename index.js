const TelegramBot = require('node-telegram-bot-api');
// const sequelize = require('./db')
const UserQuestionsModel = require('./models')
const { funnyQuestions } = require('./questions/funnyQuestions')
const { acquaintanceQuestions } = require('./questions/acquaintanceQuestions')
const { forCouplesQuestions } = require('./questions/forCouplesQuestions')
const { philosophicalQuestions } = require('./questions/philosophicalQuestions')

require('dotenv').config();

const bot = new TelegramBot(process.env.TELEGRAM_API_TOKEN, { polling: true });
let LAST_CATEGORY = 'funny';
const questions = {
    funny: {
        data: funnyQuestions,
        emoji: 'üï∫',
        title: 'üï∫ –ó–∞–±–∞–≤–Ω—ã–µ',
    },
    forCouples: {
        data: forCouplesQuestions,
        emoji: 'üë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®',
        title: 'üë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë® –î–ª—è –ø–∞—Ä–æ—á–µ–∫',
    },
    acquaintance: {
        data: acquaintanceQuestions,
        emoji: 'üôã',
        title: 'üôã –î–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞',
    },
    philosophical: {
        data: philosophicalQuestions,
        emoji: 'üó£',
        title: 'üó£ –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ',
    },
}

const getKeyboardElement = (type) => ({ text: questions[type].title, callback_data: type })

const questionTypeOptions = {
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [
                getKeyboardElement('funny'),
                getKeyboardElement('philosophical'),

            ],
            [
                getKeyboardElement('acquaintance'),
                getKeyboardElement('forCouples'),
            ],
            [
                { text: 'üé≤', callback_data: 'random' },
            ]
        ]
    })
}

const afterQuestionOptions = {
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [
                { text: '–°–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data: 'change_category' },
                { text: '–ï—â–µ', callback_data: 'more' }
            
            ],
            [
                { text: 'üé≤', callback_data: 'random' },
            ]
        ]
    })
}

const randomFunc = (data) => {
    return Math.floor(Math.random() * data.length)
}

const randomCategory = () =>  Object.keys(questions)[randomFunc(Object.keys(questions))]

const chooseQuestion = (type) => {
    const data = questions[type].data
    return `${questions[type].emoji} ${data[randomFunc(data)].ru}`
}

const checkToValidCategory = (dataForCheck) => {
    return Object.keys(questions).includes(dataForCheck);
}

const start = async () => {

    // try {
    //     await sequelize.authenticate()
    //     await sequelize.sync()
    // } catch (error) {
    //     console.log(error)
    // }

    bot.setMyCommands([
        { command: '/start', description: '–ü–æ–µ—Ö–∞–ª–∏' },
        { command: '/question', description: '–•–æ—á—É –≤–æ–ø—Ä–æ—Å' },
        // { command: '/add', description: '–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å' },
    ])

    bot.onText(/\/start/, async msg => {
        await bot.sendMessage(msg.chat.id, "–ü—Ä–∏–≤–µ—Ç üëã, —è –±–æ—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø–æ—Å–∏–¥–µ–ª–æ–∫ —Å –¥—Ä—É–∑—å—è–º–∏, –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞ üëá", questionTypeOptions);
    })
    bot.onText(/\/question/, async msg => {
        await bot.sendMessage(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞ üëá", questionTypeOptions);
    })
    bot.onText(/\/add/, async msg => {
        const chatId = msg.chat.id;
        await UserQuestionsModel.create({ chatId }); // –ø–æ–¥—É–º–∞—Ç—å, –∑–∞–ª—É–ø–∞ –∫–∞–∫–∞—è-—Ç–æ (—Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ –∞–π–¥–∏ —á–∞—Ç–∞)
        await bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Å–æ–±–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –æ–Ω –±—É–¥–µ—Ç –≤–æ –≤–∫–ª–∞–¥–∫–µ '–í–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'");
    })
    bot.on('callback_query', async msg => {
        const data = msg.data;
        const chatId = msg.message.chat.id;

        if (checkToValidCategory(data)) {
            LAST_CATEGORY = data;
            return bot.sendMessage(chatId, chooseQuestion(data), afterQuestionOptions)
        }
        if (data === 'more') {
            if (LAST_CATEGORY === 'random') LAST_CATEGORY = randomCategory()
            return bot.sendMessage(chatId, chooseQuestion(LAST_CATEGORY), afterQuestionOptions)
        }
        if (data === 'change_category') {
            return bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞", questionTypeOptions);
        }
        if (data === 'random') {
            LAST_CATEGORY = 'random';
            return bot.sendMessage(chatId, chooseQuestion(randomCategory()), afterQuestionOptions)
        }
    })
}

start();
